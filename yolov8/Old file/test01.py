import tkinter as tk
from PIL import Image, ImageTk
import os
import cv2
from ultralytics import YOLO  
from tkinter import messagebox
from datetime import datetime

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
model_path = r"D:\yolov8\runs\detect\train4\weights\best.pt"
model = YOLO(model_path)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡πÇ‡∏Å‡πâ
assets_path = r"D:\yolov8\assets"
logo_path = os.path.join(assets_path, "BOSCH_LOGO.png")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
root = tk.Tk()
root.title("P38 Counting UI")
root.geometry("1280x740")
root.configure(bg="white")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
logo_img = Image.open(logo_path).resize((250, 80))
logo_photo = ImageTk.PhotoImage(logo_img)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Layout ‡∏´‡∏•‡∏±‡∏Å
main_frame = tk.Frame(root, bg="white")
main_frame.pack(side=tk.LEFT, padx=20, pady=20, anchor="nw")

# ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ
logo_label = tk.Label(main_frame, image=logo_photo, bg="white")
logo_label.pack(anchor="w", pady=5)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
p38_var = tk.StringVar(value="0")
p38_total_var = tk.StringVar(value="0/170")
pc_total_var = tk.StringVar(value="1/6")
box_count_var = tk.StringVar(value="0")
status_var = tk.StringVar(value="Ready")

# ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
p38_per_layer = 34  
total_layers = 5  
total_p38_per_box = p38_per_layer * total_layers  
current_layer = 1  
total_p38 = 0  
pc_total = 1  
box_count = 0  
cap = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
is_camera_stopped = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° Label
def create_entry(parent, label_text, text_var, row):
    tk.Label(parent, text=label_text, font=("Arial", 16, "bold"), bg="white").grid(
        row=row, column=0, sticky="w", padx=10, pady=2
    )
    entry = tk.Entry(
        parent, textvariable=text_var, 
        font=("Arial", 16),
        state="readonly", 
        width=25,  
        relief="solid"
    )
    entry.grid(row=row + 1, column=0, padx=10, pady=5, sticky="we")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
form_frame = tk.Frame(main_frame, bg="white")
form_frame.pack(anchor="w", pady=10)

create_entry(form_frame, "P38", p38_var, row=0)
create_entry(form_frame, "P38 Total / Box", p38_total_var, row=2)
create_entry(form_frame, "Pc Total", pc_total_var, row=4)
create_entry(form_frame, "Box Count", box_count_var, row=6)

# ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
tk.Label(form_frame, text="Status", font=("Arial", 14, "bold"), bg="white").grid(row=8, column=0, sticky="w", padx=10, pady=5)
status_entry = tk.Entry(form_frame, textvariable=status_var, font=("Arial", 14), state="readonly", width=20, relief="solid", fg="blue")
status_entry.grid(row=9, column=0, padx=10, pady=5, sticky="we")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
def start_camera():
    global cap, is_camera_stopped
    if is_camera_stopped:
        is_camera_stopped = False
    cap = cv2.VideoCapture(0)
    status_var.set("Processing")
    update_frame()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
def stop_camera():
    global cap
    if cap.isOpened():
        cap.release()
    camera_label.config(image="")
    status_var.set("Stop Camera")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Reset
def reset_action():
    global total_p38, current_layer
    p38_var.set("0")  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ P38 ‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ
    status_var.set("Processing")  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    complete_button.config(state=tk.DISABLED)  # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Complete ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    resets_button.config(state=tk.DISABLED)  # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Reset ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    start_camera()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

# ‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Date
date_var = tk.StringVar()

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
def update_date():
    today = datetime.now().strftime("%d/%m/%Y")
    date_var.set(f"Date: {today}")


def update_frame():
    global cap, current_layer, total_p38, pc_total, box_count
    if cap.isOpened():
        ret, frame = cap.read()
        if ret:
            # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏ß‡∏¢ YOLO
            results = model(frame, conf=0.7)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà 70%
            current_count = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô P38 ‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

            for result in results:
                for box in result.boxes:
                    x1, y1, x2, y2 = map(int, box.xyxy[0])  # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏ö
                    conf = box.conf[0].item()  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                    cls = int(box.cls[0].item())  # Class ID
                    label = f"P38"
                    
                    # ‡∏ñ‡πâ‡∏≤ class ID ‡πÄ‡∏õ‡πá‡∏ô P38 (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô dataset)
                    if cls == 0:  # Class ID 0 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á P38
                        current_count += 1
                        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á label
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 34 ‡∏ä‡∏¥‡πâ‡∏ô
            if current_count > p38_per_layer:
                current_count = p38_per_layer

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô P38 ‡πÉ‡∏ô UI (‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå)
            p38_var.set(str(current_count))
            p38_total_var.set(f"{total_p38 + current_count}/{p38_per_layer * total_layers}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if current_count >= p38_per_layer:
                status_var.set("Fully")
                complete_button.config(state=tk.NORMAL)  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° "Complete"
                resets_button.config(state=tk.NORMAL)  # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° "Reset"
                
                if status_var.get() != "Completed":
                    messagebox.showinfo("Layer Complete", f"Layer {current_layer} is full.\nPlease click 'Complete' or 'Reset' to continue.")
                    stop_camera()
                    status_var.set("Completed")  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥
            else:
                status_var.set("Processing")
                complete_button.config(state=tk.DISABLED)  # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° "Complete"
                resets_button.config(state=tk.DISABLED)  # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° "Reset"

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å OpenCV (BGR) ‡πÄ‡∏õ‡πá‡∏ô Tkinter-compatible (RGB)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)
            camera_label.imgtk = imgtk
            camera_label.configure(image=imgtk)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡∏Å 10ms
        camera_label.after(10, update_frame)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "Complete"
def complete_action():
    global current_layer, total_p38, pc_total, box_count
    current_count = int(p38_var.get())  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô P38 ‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 34 ‡∏ä‡∏¥‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if current_count < p38_per_layer:
        messagebox.showwarning("Incomplete", f"Layer {current_layer} is not complete. Only {current_count} P38 detected.")
        return

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if current_layer < total_layers:
        current_layer += 1
        pc_total += 1
        total_p38 += p38_per_layer
        pc_total_var.set(f"{pc_total}/{total_layers + 1}")
        status_var.set("Processing")
        start_camera()
    else:
        total_p38 += p38_per_layer
        box_count += 1
        current_layer = 1
        pc_total = 1
        total_p38 = 0
        pc_total_var.set(f"{pc_total}/{total_layers + 1}")
        box_count_var.set(str(box_count))
        status_var.set("Ready")
        messagebox.showinfo("Box Complete", f"Box {box_count} is complete. Starting Box {box_count + 1}.")

    # ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° "Complete" ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    complete_button.config(state=tk.DISABLED)

# ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏∏‡πà‡∏°
button_images = {
    "start": ("Str.png", "StrA.png"),
    "stop": ("Sto.png", "StoA.png"),
    "complete": ("CopA.png", "CopA.png"),
    "resets": ("Re.png", "ReA.png"),
}

images = {
    key: (
        ImageTk.PhotoImage(Image.open(os.path.join(assets_path, val[0])).resize((150, 50))),
        ImageTk.PhotoImage(Image.open(os.path.join(assets_path, val[1])).resize((150, 50)))
    )
    for key, val in button_images.items()
}

header_frame = tk.Frame(root, bg="white")
header_frame.pack(side=tk.TOP, anchor="w", padx=20)  # ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° pady ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
date_label = tk.Label(root, textvariable=date_var, font=("Arial", 14, "bold"), bg="white")
date_label.place(relx=1.0, y=45, anchor="ne", x=-20)  # ‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏õ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô

# ‚úÖ ‡∏Ç‡∏¢‡∏±‡∏ö OpenCV ‡∏•‡∏á‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ pady
opencv_label = tk.Label(header_frame, text="OpenCV", font=("Arial", 18, "bold"), bg="white")
opencv_label.pack(side=tk.LEFT, pady=45)  # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡∏á‡∏°‡∏≤

# ‚úÖ ‡∏Ç‡∏¢‡∏±‡∏ö‡∏™‡∏µ RGB ‡∏•‡∏á‡∏°‡∏≤‡∏ï‡∏≤‡∏° OpenCV
tk.Label(header_frame, text="  ", bg="red", width=2, height=1).pack(side=tk.LEFT, padx=2, pady=10)
tk.Label(header_frame, text="  ", bg="green", width=2, height=1).pack(side=tk.LEFT, padx=2, pady=10)
tk.Label(header_frame, text="  ", bg="blue", width=2, height=1).pack(side=tk.LEFT, padx=2, pady=10)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
button_frame = tk.Frame(main_frame, bg="white")
button_frame.pack(pady=50, anchor="w")

start_button = tk.Button(button_frame, image=images["start"][0], borderwidth=0, command=start_camera)
start_button.grid(row=0, column=0, padx=5, pady=5)

stop_button = tk.Button(button_frame, image=images["stop"][0], borderwidth=0, command=stop_camera)
stop_button.grid(row=0, column=1, padx=5, pady=5)

complete_button = tk.Button(button_frame, image=images["complete"][0], borderwidth=0, command=complete_action, state=tk.DISABLED)
complete_button.grid(row=1, column=0, padx=5, pady=5)

resets_button = tk.Button(button_frame, image=images["resets"][0], borderwidth=0, command=reset_action, state=tk.DISABLED)
resets_button.grid(row=1, column=1, padx=5, pady=5)
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á OpenCV ‡πÉ‡∏ô GUI
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á OpenCV
camera_frame = tk.Frame(root, bg="white", bd=2, relief="solid")
camera_frame.pack(side=tk.RIGHT, padx=20, pady=20, anchor="ne")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
camera_label = tk.Label(camera_frame, bg="gray", width=1440, height=800)
camera_label.pack(fill=tk.BOTH, expand=True)

update_date()

# ‡∏£‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
root.mainloop()
